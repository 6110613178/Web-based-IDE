{"id":"node_modules/limiter/lib/rateLimiter.js","dependencies":[{"name":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\package.json","includedInParent":true,"mtime":1648481643194},{"name":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\node_modules\\limiter\\package.json","includedInParent":true,"mtime":1648481640466},{"name":"./tokenBucket","loc":{"line":1,"column":26,"index":26},"parent":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\node_modules\\limiter\\lib\\rateLimiter.js","resolved":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\node_modules\\limiter\\lib\\tokenBucket.js"},{"name":"./clock","loc":{"line":2,"column":30,"index":75},"parent":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\node_modules\\limiter\\lib\\rateLimiter.js","resolved":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\node_modules\\limiter\\lib\\clock.js"},{"name":"process","parent":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\node_modules\\limiter\\lib\\rateLimiter.js","resolved":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\node_modules\\process\\browser.js"}],"generated":{"js":"var process = require(\"process\");\nvar TokenBucket = require('./tokenBucket');\r\nvar getMilliseconds = require('./clock');\r\n\r\n/**\r\n * A generic rate limiter. Underneath the hood, this uses a token bucket plus\r\n * an additional check to limit how many tokens we can remove each interval.\r\n * @author John Hurliman <jhurliman@jhurliman.org>\r\n *\r\n * @param {Number} tokensPerInterval Maximum number of tokens that can be\r\n *  removed at any given moment and over the course of one interval.\r\n * @param {String|Number} interval The interval length in milliseconds, or as\r\n *  one of the following strings: 'second', 'minute', 'hour', day'.\r\n * @param {Boolean} fireImmediately Optional. Whether or not the callback\r\n *  will fire immediately when rate limiting is in effect (default is false).\r\n */\r\nvar RateLimiter = function(tokensPerInterval, interval, fireImmediately) {\r\n  this.tokenBucket = new TokenBucket(tokensPerInterval, tokensPerInterval,\r\n    interval, null);\r\n\r\n  // Fill the token bucket to start\r\n  this.tokenBucket.content = tokensPerInterval;\r\n\r\n  this.curIntervalStart = getMilliseconds();\r\n  this.tokensThisInterval = 0;\r\n  this.fireImmediately = fireImmediately;\r\n};\r\n\r\nRateLimiter.prototype = {\r\n  tokenBucket: null,\r\n  curIntervalStart: 0,\r\n  tokensThisInterval: 0,\r\n  fireImmediately: false,\r\n\r\n  /**\r\n   * Remove the requested number of tokens and fire the given callback. If the\r\n   * rate limiter contains enough tokens and we haven't spent too many tokens\r\n   * in this interval already, this will happen immediately. Otherwise, the\r\n   * removal and callback will happen when enough tokens become available.\r\n   * @param {Number} count The number of tokens to remove.\r\n   * @param {Function} callback(err, remainingTokens)\r\n   * @returns {Boolean} True if the callback was fired immediately, otherwise\r\n   *  false.\r\n   */\r\n  removeTokens: function(count, callback) {\r\n    // Make sure the request isn't for more than we can handle\r\n    if (count > this.tokenBucket.bucketSize) {\r\n      process.nextTick(callback.bind(null, 'Requested tokens ' + count +\r\n        ' exceeds maximum tokens per interval ' + this.tokenBucket.bucketSize,\r\n        null));\r\n      return false;\r\n    }\r\n\r\n    var self = this;\r\n    var now = getMilliseconds();\r\n\r\n    // Advance the current interval and reset the current interval token count\r\n    // if needed\r\n    if (now < this.curIntervalStart\r\n      || now - this.curIntervalStart >= this.tokenBucket.interval) {\r\n      this.curIntervalStart = now;\r\n      this.tokensThisInterval = 0;\r\n    }\r\n\r\n    // If we don't have enough tokens left in this interval, wait until the\r\n    // next interval\r\n    if (count > this.tokenBucket.tokensPerInterval - this.tokensThisInterval) {\r\n      if (this.fireImmediately) {\r\n        process.nextTick(callback.bind(null, null, -1));\r\n      } else {\r\n        var waitInterval = Math.ceil(\r\n          this.curIntervalStart + this.tokenBucket.interval - now);\r\n\r\n        setTimeout(function() {\r\n          self.tokenBucket.removeTokens(count, afterTokensRemoved);\r\n        }, waitInterval);\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // Remove the requested number of tokens from the token bucket\r\n    return this.tokenBucket.removeTokens(count, afterTokensRemoved);\r\n\r\n    function afterTokensRemoved(err, tokensRemaining) {\r\n      if (err) return callback(err, null);\r\n\r\n      self.tokensThisInterval += count;\r\n      callback(null, tokensRemaining);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Attempt to remove the requested number of tokens and return immediately.\r\n   * If the bucket (and any parent buckets) contains enough tokens and we\r\n   * haven't spent too many tokens in this interval already, this will return\r\n   * true. Otherwise, false is returned.\r\n   * @param {Number} count The number of tokens to remove.\r\n   * @param {Boolean} True if the tokens were successfully removed, otherwise\r\n   *  false.\r\n   */\r\n  tryRemoveTokens: function(count) {\r\n    // Make sure the request isn't for more than we can handle\r\n    if (count > this.tokenBucket.bucketSize)\r\n      return false;\r\n\r\n    var now = getMilliseconds();\r\n\r\n    // Advance the current interval and reset the current interval token count\r\n    // if needed\r\n    if (now < this.curIntervalStart\r\n      || now - this.curIntervalStart >= this.tokenBucket.interval) {\r\n      this.curIntervalStart = now;\r\n      this.tokensThisInterval = 0;\r\n    }\r\n\r\n    // If we don't have enough tokens left in this interval, return false\r\n    if (count > this.tokenBucket.tokensPerInterval - this.tokensThisInterval)\r\n      return false;\r\n\r\n    // Try to remove the requested number of tokens from the token bucket\r\n    var removed = this.tokenBucket.tryRemoveTokens(count);\r\n    if (removed) {\r\n      this.tokensThisInterval += count;\r\n    }\r\n    return removed;\r\n  },\r\n\r\n  /**\r\n   * Returns the number of tokens remaining in the TokenBucket.\r\n   * @returns {Number} The number of tokens remaining.\r\n   */\r\n  getTokensRemaining: function () {\r\n    this.tokenBucket.drip();\r\n    return this.tokenBucket.content;\r\n  }\r\n};\r\n\r\nmodule.exports = RateLimiter;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/limiter/lib/rateLimiter.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}}],"sources":{"node_modules/limiter/lib/rateLimiter.js":"var TokenBucket = require('./tokenBucket');\r\nvar getMilliseconds = require('./clock');\r\n\r\n/**\r\n * A generic rate limiter. Underneath the hood, this uses a token bucket plus\r\n * an additional check to limit how many tokens we can remove each interval.\r\n * @author John Hurliman <jhurliman@jhurliman.org>\r\n *\r\n * @param {Number} tokensPerInterval Maximum number of tokens that can be\r\n *  removed at any given moment and over the course of one interval.\r\n * @param {String|Number} interval The interval length in milliseconds, or as\r\n *  one of the following strings: 'second', 'minute', 'hour', day'.\r\n * @param {Boolean} fireImmediately Optional. Whether or not the callback\r\n *  will fire immediately when rate limiting is in effect (default is false).\r\n */\r\nvar RateLimiter = function(tokensPerInterval, interval, fireImmediately) {\r\n  this.tokenBucket = new TokenBucket(tokensPerInterval, tokensPerInterval,\r\n    interval, null);\r\n\r\n  // Fill the token bucket to start\r\n  this.tokenBucket.content = tokensPerInterval;\r\n\r\n  this.curIntervalStart = getMilliseconds();\r\n  this.tokensThisInterval = 0;\r\n  this.fireImmediately = fireImmediately;\r\n};\r\n\r\nRateLimiter.prototype = {\r\n  tokenBucket: null,\r\n  curIntervalStart: 0,\r\n  tokensThisInterval: 0,\r\n  fireImmediately: false,\r\n\r\n  /**\r\n   * Remove the requested number of tokens and fire the given callback. If the\r\n   * rate limiter contains enough tokens and we haven't spent too many tokens\r\n   * in this interval already, this will happen immediately. Otherwise, the\r\n   * removal and callback will happen when enough tokens become available.\r\n   * @param {Number} count The number of tokens to remove.\r\n   * @param {Function} callback(err, remainingTokens)\r\n   * @returns {Boolean} True if the callback was fired immediately, otherwise\r\n   *  false.\r\n   */\r\n  removeTokens: function(count, callback) {\r\n    // Make sure the request isn't for more than we can handle\r\n    if (count > this.tokenBucket.bucketSize) {\r\n      process.nextTick(callback.bind(null, 'Requested tokens ' + count +\r\n        ' exceeds maximum tokens per interval ' + this.tokenBucket.bucketSize,\r\n        null));\r\n      return false;\r\n    }\r\n\r\n    var self = this;\r\n    var now = getMilliseconds();\r\n\r\n    // Advance the current interval and reset the current interval token count\r\n    // if needed\r\n    if (now < this.curIntervalStart\r\n      || now - this.curIntervalStart >= this.tokenBucket.interval) {\r\n      this.curIntervalStart = now;\r\n      this.tokensThisInterval = 0;\r\n    }\r\n\r\n    // If we don't have enough tokens left in this interval, wait until the\r\n    // next interval\r\n    if (count > this.tokenBucket.tokensPerInterval - this.tokensThisInterval) {\r\n      if (this.fireImmediately) {\r\n        process.nextTick(callback.bind(null, null, -1));\r\n      } else {\r\n        var waitInterval = Math.ceil(\r\n          this.curIntervalStart + this.tokenBucket.interval - now);\r\n\r\n        setTimeout(function() {\r\n          self.tokenBucket.removeTokens(count, afterTokensRemoved);\r\n        }, waitInterval);\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // Remove the requested number of tokens from the token bucket\r\n    return this.tokenBucket.removeTokens(count, afterTokensRemoved);\r\n\r\n    function afterTokensRemoved(err, tokensRemaining) {\r\n      if (err) return callback(err, null);\r\n\r\n      self.tokensThisInterval += count;\r\n      callback(null, tokensRemaining);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Attempt to remove the requested number of tokens and return immediately.\r\n   * If the bucket (and any parent buckets) contains enough tokens and we\r\n   * haven't spent too many tokens in this interval already, this will return\r\n   * true. Otherwise, false is returned.\r\n   * @param {Number} count The number of tokens to remove.\r\n   * @param {Boolean} True if the tokens were successfully removed, otherwise\r\n   *  false.\r\n   */\r\n  tryRemoveTokens: function(count) {\r\n    // Make sure the request isn't for more than we can handle\r\n    if (count > this.tokenBucket.bucketSize)\r\n      return false;\r\n\r\n    var now = getMilliseconds();\r\n\r\n    // Advance the current interval and reset the current interval token count\r\n    // if needed\r\n    if (now < this.curIntervalStart\r\n      || now - this.curIntervalStart >= this.tokenBucket.interval) {\r\n      this.curIntervalStart = now;\r\n      this.tokensThisInterval = 0;\r\n    }\r\n\r\n    // If we don't have enough tokens left in this interval, return false\r\n    if (count > this.tokenBucket.tokensPerInterval - this.tokensThisInterval)\r\n      return false;\r\n\r\n    // Try to remove the requested number of tokens from the token bucket\r\n    var removed = this.tokenBucket.tryRemoveTokens(count);\r\n    if (removed) {\r\n      this.tokensThisInterval += count;\r\n    }\r\n    return removed;\r\n  },\r\n\r\n  /**\r\n   * Returns the number of tokens remaining in the TokenBucket.\r\n   * @returns {Number} The number of tokens remaining.\r\n   */\r\n  getTokensRemaining: function () {\r\n    this.tokenBucket.drip();\r\n    return this.tokenBucket.content;\r\n  }\r\n};\r\n\r\nmodule.exports = RateLimiter;\r\n"},"lineCount":139}},"error":null,"hash":"18c665e49b280b21b82d365a8d433894","cacheData":{"env":{}}}
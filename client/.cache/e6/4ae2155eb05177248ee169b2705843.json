{"id":"node_modules/protobufjs/src/verifier.js","dependencies":[{"name":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\package.json","includedInParent":true,"mtime":1648481643194},{"name":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\node_modules\\protobufjs\\package.json","includedInParent":true,"mtime":1648481642169},{"name":"./enum","loc":{"line":4,"column":24,"index":66},"parent":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\node_modules\\protobufjs\\src\\verifier.js","resolved":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\node_modules\\protobufjs\\src\\enum.js"},{"name":"./util","loc":{"line":5,"column":24,"index":101},"parent":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\node_modules\\protobufjs\\src\\verifier.js","resolved":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\node_modules\\protobufjs\\src\\util.js"}],"generated":{"js":"\"use strict\";\nmodule.exports = verifier;\n\nvar Enum      = require(\"./enum\"),\n    util      = require(\"./util\");\n\nfunction invalid(field, expected) {\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\n}\n\n/**\n * Generates a partial value verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\n    /* eslint-disable no-unexpected-multiline */\n    if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) { gen\n            (\"switch(%s){\", ref)\n                (\"default:\")\n                    (\"return%j\", invalid(field, \"enum value\"));\n            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\n                (\"case %i:\", field.resolvedType.values[keys[j]]);\n            gen\n                    (\"break\")\n            (\"}\");\n        } else {\n            gen\n            (\"{\")\n                (\"var e=types[%i].verify(%s);\", fieldIndex, ref)\n                (\"if(e)\")\n                    (\"return%j+e\", field.name + \".\")\n            (\"}\");\n        }\n    } else {\n        switch (field.type) {\n            case \"int32\":\n            case \"uint32\":\n            case \"sint32\":\n            case \"fixed32\":\n            case \"sfixed32\": gen\n                (\"if(!util.isInteger(%s))\", ref)\n                    (\"return%j\", invalid(field, \"integer\"));\n                break;\n            case \"int64\":\n            case \"uint64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\": gen\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\n                    (\"return%j\", invalid(field, \"integer|Long\"));\n                break;\n            case \"float\":\n            case \"double\": gen\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\n                    (\"return%j\", invalid(field, \"number\"));\n                break;\n            case \"bool\": gen\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\n                    (\"return%j\", invalid(field, \"boolean\"));\n                break;\n            case \"string\": gen\n                (\"if(!util.isString(%s))\", ref)\n                    (\"return%j\", invalid(field, \"string\"));\n                break;\n            case \"bytes\": gen\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\n                    (\"return%j\", invalid(field, \"buffer\"));\n                break;\n        }\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline */\n}\n\n/**\n * Generates a partial key verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genVerifyKey(gen, field, ref) {\n    /* eslint-disable no-unexpected-multiline */\n    switch (field.keyType) {\n        case \"int32\":\n        case \"uint32\":\n        case \"sint32\":\n        case \"fixed32\":\n        case \"sfixed32\": gen\n            (\"if(!util.key32Re.test(%s))\", ref)\n                (\"return%j\", invalid(field, \"integer key\"));\n            break;\n        case \"int64\":\n        case \"uint64\":\n        case \"sint64\":\n        case \"fixed64\":\n        case \"sfixed64\": gen\n            (\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\n                (\"return%j\", invalid(field, \"integer|Long key\"));\n            break;\n        case \"bool\": gen\n            (\"if(!util.key2Re.test(%s))\", ref)\n                (\"return%j\", invalid(field, \"boolean key\"));\n            break;\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline */\n}\n\n/**\n * Generates a verifier specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nfunction verifier(mtype) {\n    /* eslint-disable no-unexpected-multiline */\n\n    var gen = util.codegen([\"m\"], mtype.name + \"$verify\")\n    (\"if(typeof m!==\\\"object\\\"||m===null)\")\n        (\"return%j\", \"object expected\");\n    var oneofs = mtype.oneofsArray,\n        seenFirstField = {};\n    if (oneofs.length) gen\n    (\"var p={}\");\n\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\n        var field = mtype._fieldsArray[i].resolve(),\n            ref   = \"m\" + util.safeProp(field.name);\n\n        if (field.optional) gen\n        (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name); // !== undefined && !== null\n\n        // map fields\n        if (field.map) { gen\n            (\"if(!util.isObject(%s))\", ref)\n                (\"return%j\", invalid(field, \"object\"))\n            (\"var k=Object.keys(%s)\", ref)\n            (\"for(var i=0;i<k.length;++i){\");\n                genVerifyKey(gen, field, \"k[i]\");\n                genVerifyValue(gen, field, i, ref + \"[k[i]]\")\n            (\"}\");\n\n        // repeated fields\n        } else if (field.repeated) { gen\n            (\"if(!Array.isArray(%s))\", ref)\n                (\"return%j\", invalid(field, \"array\"))\n            (\"for(var i=0;i<%s.length;++i){\", ref);\n                genVerifyValue(gen, field, i, ref + \"[i]\")\n            (\"}\");\n\n        // required or present fields\n        } else {\n            if (field.partOf) {\n                var oneofProp = util.safeProp(field.partOf.name);\n                if (seenFirstField[field.partOf.name] === 1) gen\n            (\"if(p%s===1)\", oneofProp)\n                (\"return%j\", field.partOf.name + \": multiple values\");\n                seenFirstField[field.partOf.name] = 1;\n                gen\n            (\"p%s=1\", oneofProp);\n            }\n            genVerifyValue(gen, field, i, ref);\n        }\n        if (field.optional) gen\n        (\"}\");\n    }\n    return gen\n    (\"return null\");\n    /* eslint-enable no-unexpected-multiline */\n}"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/protobufjs/src/verifier.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}}],"sources":{"node_modules/protobufjs/src/verifier.js":"\"use strict\";\nmodule.exports = verifier;\n\nvar Enum      = require(\"./enum\"),\n    util      = require(\"./util\");\n\nfunction invalid(field, expected) {\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\n}\n\n/**\n * Generates a partial value verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\n    /* eslint-disable no-unexpected-multiline */\n    if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) { gen\n            (\"switch(%s){\", ref)\n                (\"default:\")\n                    (\"return%j\", invalid(field, \"enum value\"));\n            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\n                (\"case %i:\", field.resolvedType.values[keys[j]]);\n            gen\n                    (\"break\")\n            (\"}\");\n        } else {\n            gen\n            (\"{\")\n                (\"var e=types[%i].verify(%s);\", fieldIndex, ref)\n                (\"if(e)\")\n                    (\"return%j+e\", field.name + \".\")\n            (\"}\");\n        }\n    } else {\n        switch (field.type) {\n            case \"int32\":\n            case \"uint32\":\n            case \"sint32\":\n            case \"fixed32\":\n            case \"sfixed32\": gen\n                (\"if(!util.isInteger(%s))\", ref)\n                    (\"return%j\", invalid(field, \"integer\"));\n                break;\n            case \"int64\":\n            case \"uint64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\": gen\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\n                    (\"return%j\", invalid(field, \"integer|Long\"));\n                break;\n            case \"float\":\n            case \"double\": gen\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\n                    (\"return%j\", invalid(field, \"number\"));\n                break;\n            case \"bool\": gen\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\n                    (\"return%j\", invalid(field, \"boolean\"));\n                break;\n            case \"string\": gen\n                (\"if(!util.isString(%s))\", ref)\n                    (\"return%j\", invalid(field, \"string\"));\n                break;\n            case \"bytes\": gen\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\n                    (\"return%j\", invalid(field, \"buffer\"));\n                break;\n        }\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline */\n}\n\n/**\n * Generates a partial key verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genVerifyKey(gen, field, ref) {\n    /* eslint-disable no-unexpected-multiline */\n    switch (field.keyType) {\n        case \"int32\":\n        case \"uint32\":\n        case \"sint32\":\n        case \"fixed32\":\n        case \"sfixed32\": gen\n            (\"if(!util.key32Re.test(%s))\", ref)\n                (\"return%j\", invalid(field, \"integer key\"));\n            break;\n        case \"int64\":\n        case \"uint64\":\n        case \"sint64\":\n        case \"fixed64\":\n        case \"sfixed64\": gen\n            (\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\n                (\"return%j\", invalid(field, \"integer|Long key\"));\n            break;\n        case \"bool\": gen\n            (\"if(!util.key2Re.test(%s))\", ref)\n                (\"return%j\", invalid(field, \"boolean key\"));\n            break;\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline */\n}\n\n/**\n * Generates a verifier specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nfunction verifier(mtype) {\n    /* eslint-disable no-unexpected-multiline */\n\n    var gen = util.codegen([\"m\"], mtype.name + \"$verify\")\n    (\"if(typeof m!==\\\"object\\\"||m===null)\")\n        (\"return%j\", \"object expected\");\n    var oneofs = mtype.oneofsArray,\n        seenFirstField = {};\n    if (oneofs.length) gen\n    (\"var p={}\");\n\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\n        var field = mtype._fieldsArray[i].resolve(),\n            ref   = \"m\" + util.safeProp(field.name);\n\n        if (field.optional) gen\n        (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name); // !== undefined && !== null\n\n        // map fields\n        if (field.map) { gen\n            (\"if(!util.isObject(%s))\", ref)\n                (\"return%j\", invalid(field, \"object\"))\n            (\"var k=Object.keys(%s)\", ref)\n            (\"for(var i=0;i<k.length;++i){\");\n                genVerifyKey(gen, field, \"k[i]\");\n                genVerifyValue(gen, field, i, ref + \"[k[i]]\")\n            (\"}\");\n\n        // repeated fields\n        } else if (field.repeated) { gen\n            (\"if(!Array.isArray(%s))\", ref)\n                (\"return%j\", invalid(field, \"array\"))\n            (\"for(var i=0;i<%s.length;++i){\", ref);\n                genVerifyValue(gen, field, i, ref + \"[i]\")\n            (\"}\");\n\n        // required or present fields\n        } else {\n            if (field.partOf) {\n                var oneofProp = util.safeProp(field.partOf.name);\n                if (seenFirstField[field.partOf.name] === 1) gen\n            (\"if(p%s===1)\", oneofProp)\n                (\"return%j\", field.partOf.name + \": multiple values\");\n                seenFirstField[field.partOf.name] = 1;\n                gen\n            (\"p%s=1\", oneofProp);\n            }\n            genVerifyValue(gen, field, i, ref);\n        }\n        if (field.optional) gen\n        (\"}\");\n    }\n    return gen\n    (\"return null\");\n    /* eslint-enable no-unexpected-multiline */\n}"},"lineCount":177}},"error":null,"hash":"4d34bdabf4e0e68c23eb56784eb9ab78","cacheData":{"env":{}}}
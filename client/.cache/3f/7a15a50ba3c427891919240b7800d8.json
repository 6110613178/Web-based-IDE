{"id":"../server/node_modules/node-pty/lib/terminal.js","dependencies":[{"name":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\server\\node_modules\\node-pty\\lib\\terminal.js.map","includedInParent":true,"mtime":1644423429448},{"name":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\server\\node_modules\\node-pty\\src\\terminal.ts","includedInParent":true,"mtime":1644423429500},{"name":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\package.json","includedInParent":true,"mtime":1648497667673},{"name":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\server\\node_modules\\node-pty\\package.json","includedInParent":true,"mtime":1644423428662},{"name":"events","loc":{"line":8,"column":23,"index":280},"parent":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\server\\node_modules\\node-pty\\lib\\terminal.js","resolved":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\node_modules\\events\\events.js"},{"name":"./eventEmitter2","loc":{"line":9,"column":30,"index":321},"parent":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\server\\node_modules\\node-pty\\lib\\terminal.js","resolved":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\server\\node_modules\\node-pty\\lib\\eventEmitter2.js"}],"generated":{"js":"\"use strict\";\n/**\n * Copyright (c) 2012-2015, Christopher Jeffrey (MIT License)\n * Copyright (c) 2016, Daniel Imms (MIT License).\n * Copyright (c) 2018, Microsoft Corporation (MIT License).\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar events_1 = require(\"events\");\nvar eventEmitter2_1 = require(\"./eventEmitter2\");\nexports.DEFAULT_COLS = 80;\nexports.DEFAULT_ROWS = 24;\n/**\n * Default messages to indicate PAUSE/RESUME for automatic flow control.\n * To avoid conflicts with rebound XON/XOFF control codes (such as on-my-zsh),\n * the sequences can be customized in `IPtyForkOptions`.\n */\nvar FLOW_CONTROL_PAUSE = '\\x13'; // defaults to XOFF\nvar FLOW_CONTROL_RESUME = '\\x11'; // defaults to XON\nvar Terminal = /** @class */ (function () {\n    function Terminal(opt) {\n        this._onData = new eventEmitter2_1.EventEmitter2();\n        this._onExit = new eventEmitter2_1.EventEmitter2();\n        // for 'close'\n        this._internalee = new events_1.EventEmitter();\n        if (!opt) {\n            return;\n        }\n        // Do basic type checks here in case node-pty is being used within JavaScript. If the wrong\n        // types go through to the C++ side it can lead to hard to diagnose exceptions.\n        this._checkType('name', opt.name ? opt.name : null, 'string');\n        this._checkType('cols', opt.cols ? opt.cols : null, 'number');\n        this._checkType('rows', opt.rows ? opt.rows : null, 'number');\n        this._checkType('cwd', opt.cwd ? opt.cwd : null, 'string');\n        this._checkType('env', opt.env ? opt.env : null, 'object');\n        this._checkType('uid', opt.uid ? opt.uid : null, 'number');\n        this._checkType('gid', opt.gid ? opt.gid : null, 'number');\n        this._checkType('encoding', opt.encoding ? opt.encoding : null, 'string');\n        // setup flow control handling\n        this.handleFlowControl = !!(opt.handleFlowControl);\n        this._flowControlPause = opt.flowControlPause || FLOW_CONTROL_PAUSE;\n        this._flowControlResume = opt.flowControlResume || FLOW_CONTROL_RESUME;\n    }\n    Object.defineProperty(Terminal.prototype, \"onData\", {\n        get: function () { return this._onData.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Terminal.prototype, \"onExit\", {\n        get: function () { return this._onExit.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Terminal.prototype, \"pid\", {\n        get: function () { return this._pid; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Terminal.prototype, \"cols\", {\n        get: function () { return this._cols; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Terminal.prototype, \"rows\", {\n        get: function () { return this._rows; },\n        enumerable: true,\n        configurable: true\n    });\n    Terminal.prototype.write = function (data) {\n        if (this.handleFlowControl) {\n            // PAUSE/RESUME messages are not forwarded to the pty\n            if (data === this._flowControlPause) {\n                this.pause();\n                return;\n            }\n            if (data === this._flowControlResume) {\n                this.resume();\n                return;\n            }\n        }\n        // everything else goes to the real pty\n        this._write(data);\n    };\n    Terminal.prototype._forwardEvents = function () {\n        var _this = this;\n        this.on('data', function (e) { return _this._onData.fire(e); });\n        this.on('exit', function (exitCode, signal) { return _this._onExit.fire({ exitCode: exitCode, signal: signal }); });\n    };\n    Terminal.prototype._checkType = function (name, value, type) {\n        if (value && typeof value !== type) {\n            throw new Error(name + \" must be a \" + type + \" (not a \" + typeof value + \")\");\n        }\n    };\n    /** See net.Socket.end */\n    Terminal.prototype.end = function (data) {\n        this._socket.end(data);\n    };\n    /** See stream.Readable.pipe */\n    Terminal.prototype.pipe = function (dest, options) {\n        return this._socket.pipe(dest, options);\n    };\n    /** See net.Socket.pause */\n    Terminal.prototype.pause = function () {\n        return this._socket.pause();\n    };\n    /** See net.Socket.resume */\n    Terminal.prototype.resume = function () {\n        return this._socket.resume();\n    };\n    /** See net.Socket.setEncoding */\n    Terminal.prototype.setEncoding = function (encoding) {\n        if (this._socket._decoder) {\n            delete this._socket._decoder;\n        }\n        if (encoding) {\n            this._socket.setEncoding(encoding);\n        }\n    };\n    Terminal.prototype.addListener = function (eventName, listener) { this.on(eventName, listener); };\n    Terminal.prototype.on = function (eventName, listener) {\n        if (eventName === 'close') {\n            this._internalee.on('close', listener);\n            return;\n        }\n        this._socket.on(eventName, listener);\n    };\n    Terminal.prototype.emit = function (eventName) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        if (eventName === 'close') {\n            return this._internalee.emit.apply(this._internalee, arguments);\n        }\n        return this._socket.emit.apply(this._socket, arguments);\n    };\n    Terminal.prototype.listeners = function (eventName) {\n        return this._socket.listeners(eventName);\n    };\n    Terminal.prototype.removeListener = function (eventName, listener) {\n        this._socket.removeListener(eventName, listener);\n    };\n    Terminal.prototype.removeAllListeners = function (eventName) {\n        this._socket.removeAllListeners(eventName);\n    };\n    Terminal.prototype.once = function (eventName, listener) {\n        this._socket.once(eventName, listener);\n    };\n    Terminal.prototype._close = function () {\n        this._socket.writable = false;\n        this._socket.readable = false;\n        this.write = function () { };\n        this.end = function () { };\n        this._writable = false;\n        this._readable = false;\n    };\n    Terminal.prototype._parseEnv = function (env) {\n        var keys = Object.keys(env || {});\n        var pairs = [];\n        for (var i = 0; i < keys.length; i++) {\n            pairs.push(keys[i] + '=' + env[keys[i]]);\n        }\n        return pairs;\n    };\n    return Terminal;\n}());\nexports.Terminal = Terminal;\n"},"sourceMaps":{"js":{"version":3,"file":"terminal.js","sourceRoot":"","sources":["../src/terminal.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2012-2015, Christopher Jeffrey (MIT License)\n * Copyright (c) 2016, Daniel Imms (MIT License).\n * Copyright (c) 2018, Microsoft Corporation (MIT License).\n */\n\nimport { Socket } from 'net';\nimport { EventEmitter } from 'events';\nimport { ITerminal, IPtyForkOptions } from './interfaces';\nimport { EventEmitter2, IEvent } from './eventEmitter2';\nimport { IExitEvent } from './types';\n\nexport const DEFAULT_COLS: number = 80;\nexport const DEFAULT_ROWS: number = 24;\n\n/**\n * Default messages to indicate PAUSE/RESUME for automatic flow control.\n * To avoid conflicts with rebound XON/XOFF control codes (such as on-my-zsh),\n * the sequences can be customized in `IPtyForkOptions`.\n */\nconst FLOW_CONTROL_PAUSE =  '\\x13';   // defaults to XOFF\nconst FLOW_CONTROL_RESUME = '\\x11';   // defaults to XON\n\nexport abstract class Terminal implements ITerminal {\n  protected _socket: Socket;\n  protected _pid: number;\n  protected _fd: number;\n  protected _pty: any;\n\n  protected _file: string;\n  protected _name: string;\n  protected _cols: number;\n  protected _rows: number;\n\n  protected _readable: boolean;\n  protected _writable: boolean;\n\n  protected _internalee: EventEmitter;\n  private _flowControlPause: string;\n  private _flowControlResume: string;\n  public handleFlowControl: boolean;\n\n  private _onData = new EventEmitter2<string>();\n  public get onData(): IEvent<string> { return this._onData.event; }\n  private _onExit = new EventEmitter2<IExitEvent>();\n  public get onExit(): IEvent<IExitEvent> { return this._onExit.event; }\n\n  public get pid(): number { return this._pid; }\n  public get cols(): number { return this._cols; }\n  public get rows(): number { return this._rows; }\n\n  constructor(opt?: IPtyForkOptions) {\n    // for 'close'\n    this._internalee = new EventEmitter();\n\n    if (!opt) {\n      return;\n    }\n\n    // Do basic type checks here in case node-pty is being used within JavaScript. If the wrong\n    // types go through to the C++ side it can lead to hard to diagnose exceptions.\n    this._checkType('name', opt.name ? opt.name : null, 'string');\n    this._checkType('cols', opt.cols ? opt.cols : null, 'number');\n    this._checkType('rows', opt.rows ? opt.rows : null, 'number');\n    this._checkType('cwd', opt.cwd ? opt.cwd : null, 'string');\n    this._checkType('env', opt.env ? opt.env : null, 'object');\n    this._checkType('uid', opt.uid ? opt.uid : null, 'number');\n    this._checkType('gid', opt.gid ? opt.gid : null, 'number');\n    this._checkType('encoding', opt.encoding ? opt.encoding : null, 'string');\n\n    // setup flow control handling\n    this.handleFlowControl = !!(opt.handleFlowControl);\n    this._flowControlPause = opt.flowControlPause || FLOW_CONTROL_PAUSE;\n    this._flowControlResume = opt.flowControlResume || FLOW_CONTROL_RESUME;\n  }\n\n  protected abstract _write(data: string): void;\n\n  public write(data: string): void {\n    if (this.handleFlowControl) {\n      // PAUSE/RESUME messages are not forwarded to the pty\n      if (data === this._flowControlPause) {\n        this.pause();\n        return;\n      }\n      if (data === this._flowControlResume) {\n        this.resume();\n        return;\n      }\n    }\n    // everything else goes to the real pty\n    this._write(data);\n  }\n\n  protected _forwardEvents(): void {\n    this.on('data', e => this._onData.fire(e));\n    this.on('exit', (exitCode, signal) => this._onExit.fire({ exitCode, signal }));\n  }\n\n  private _checkType(name: string, value: any, type: string): void {\n    if (value && typeof value !== type) {\n      throw new Error(`${name} must be a ${type} (not a ${typeof value})`);\n    }\n  }\n\n  /** See net.Socket.end */\n  public end(data: string): void {\n    this._socket.end(data);\n  }\n\n  /** See stream.Readable.pipe */\n  public pipe(dest: any, options: any): any {\n    return this._socket.pipe(dest, options);\n  }\n\n  /** See net.Socket.pause */\n  public pause(): Socket {\n    return this._socket.pause();\n  }\n\n  /** See net.Socket.resume */\n  public resume(): Socket {\n    return this._socket.resume();\n  }\n\n  /** See net.Socket.setEncoding */\n  public setEncoding(encoding: string | null): void {\n    if ((<any>this._socket)._decoder) {\n      delete (<any>this._socket)._decoder;\n    }\n    if (encoding) {\n      this._socket.setEncoding(encoding);\n    }\n  }\n\n  public addListener(eventName: string, listener: (...args: any[]) => any): void { this.on(eventName, listener); }\n  public on(eventName: string, listener: (...args: any[]) => any): void {\n    if (eventName === 'close') {\n      this._internalee.on('close', listener);\n      return;\n    }\n    this._socket.on(eventName, listener);\n  }\n\n  public emit(eventName: string, ...args: any[]): any {\n    if (eventName === 'close') {\n      return this._internalee.emit.apply(this._internalee, arguments);\n    }\n    return this._socket.emit.apply(this._socket, arguments);\n  }\n\n  public listeners(eventName: string): Function[] {\n    return this._socket.listeners(eventName);\n  }\n\n  public removeListener(eventName: string, listener: (...args: any[]) => any): void {\n    this._socket.removeListener(eventName, listener);\n  }\n\n  public removeAllListeners(eventName: string): void {\n    this._socket.removeAllListeners(eventName);\n  }\n\n  public once(eventName: string, listener: (...args: any[]) => any): void {\n    this._socket.once(eventName, listener);\n  }\n\n  public abstract resize(cols: number, rows: number): void;\n  public abstract destroy(): void;\n  public abstract kill(signal?: string): void;\n\n  public abstract get process(): string;\n  public abstract get master(): Socket;\n  public abstract get slave(): Socket;\n\n  protected _close(): void {\n    this._socket.writable = false;\n    this._socket.readable = false;\n    this.write = () => {};\n    this.end = () => {};\n    this._writable = false;\n    this._readable = false;\n  }\n\n  protected _parseEnv(env: {[key: string]: string}): string[] {\n    const keys = Object.keys(env || {});\n    const pairs = [];\n\n    for (let i = 0; i < keys.length; i++) {\n      pairs.push(keys[i] + '=' + env[keys[i]]);\n    }\n\n    return pairs;\n  }\n}\n"]}},"error":null,"hash":"a18229cc8cdec8fc105900b534e94e36","cacheData":{"env":{}}}
{"id":"node_modules/protobufjs/src/tokenize.js","dependencies":[{"name":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\package.json","includedInParent":true,"mtime":1648481643194},{"name":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\node_modules\\protobufjs\\package.json","includedInParent":true,"mtime":1648481642169}],"generated":{"js":"\"use strict\";\nmodule.exports = tokenize;\n\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\n\nvar setCommentRe = /^ *[*/]+ */,\n    setCommentAltRe = /^\\s*\\*?\\/*/,\n    setCommentSplitRe = /\\n/g,\n    whitespaceRe = /\\s/,\n    unescapeRe = /\\\\(.?)/g;\n\nvar unescapeMap = {\n    \"0\": \"\\0\",\n    \"r\": \"\\r\",\n    \"n\": \"\\n\",\n    \"t\": \"\\t\"\n};\n\n/**\n * Unescapes a string.\n * @param {string} str String to unescape\n * @returns {string} Unescaped string\n * @property {Object.<string,string>} map Special characters map\n * @memberof tokenize\n */\nfunction unescape(str) {\n    return str.replace(unescapeRe, function($0, $1) {\n        switch ($1) {\n            case \"\\\\\":\n            case \"\":\n                return $1;\n            default:\n                return unescapeMap[$1] || \"\";\n        }\n    });\n}\n\ntokenize.unescape = unescape;\n\n/**\n * Gets the next token and advances.\n * @typedef TokenizerHandleNext\n * @type {function}\n * @returns {string|null} Next token or `null` on eof\n */\n\n/**\n * Peeks for the next token.\n * @typedef TokenizerHandlePeek\n * @type {function}\n * @returns {string|null} Next token or `null` on eof\n */\n\n/**\n * Pushes a token back to the stack.\n * @typedef TokenizerHandlePush\n * @type {function}\n * @param {string} token Token\n * @returns {undefined}\n */\n\n/**\n * Skips the next token.\n * @typedef TokenizerHandleSkip\n * @type {function}\n * @param {string} expected Expected token\n * @param {boolean} [optional=false] If optional\n * @returns {boolean} Whether the token matched\n * @throws {Error} If the token didn't match and is not optional\n */\n\n/**\n * Gets the comment on the previous line or, alternatively, the line comment on the specified line.\n * @typedef TokenizerHandleCmnt\n * @type {function}\n * @param {number} [line] Line number\n * @returns {string|null} Comment text or `null` if none\n */\n\n/**\n * Handle object returned from {@link tokenize}.\n * @interface ITokenizerHandle\n * @property {TokenizerHandleNext} next Gets the next token and advances (`null` on eof)\n * @property {TokenizerHandlePeek} peek Peeks for the next token (`null` on eof)\n * @property {TokenizerHandlePush} push Pushes a token back to the stack\n * @property {TokenizerHandleSkip} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\n * @property {TokenizerHandleCmnt} cmnt Gets the comment on the previous line or the line comment on the specified line, if any\n * @property {number} line Current line number\n */\n\n/**\n * Tokenizes the given .proto source and returns an object with useful utility functions.\n * @param {string} source Source contents\n * @param {boolean} alternateCommentMode Whether we should activate alternate comment parsing mode.\n * @returns {ITokenizerHandle} Tokenizer handle\n */\nfunction tokenize(source, alternateCommentMode) {\n    /* eslint-disable callback-return */\n    source = source.toString();\n\n    var offset = 0,\n        length = source.length,\n        line = 1,\n        commentType = null,\n        commentText = null,\n        commentLine = 0,\n        commentLineEmpty = false,\n        commentIsLeading = false;\n\n    var stack = [];\n\n    var stringDelim = null;\n\n    /* istanbul ignore next */\n    /**\n     * Creates an error for illegal syntax.\n     * @param {string} subject Subject\n     * @returns {Error} Error created\n     * @inner\n     */\n    function illegal(subject) {\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\n    }\n\n    /**\n     * Reads a string till its end.\n     * @returns {string} String read\n     * @inner\n     */\n    function readString() {\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\n        re.lastIndex = offset - 1;\n        var match = re.exec(source);\n        if (!match)\n            throw illegal(\"string\");\n        offset = re.lastIndex;\n        push(stringDelim);\n        stringDelim = null;\n        return unescape(match[1]);\n    }\n\n    /**\n     * Gets the character at `pos` within the source.\n     * @param {number} pos Position\n     * @returns {string} Character\n     * @inner\n     */\n    function charAt(pos) {\n        return source.charAt(pos);\n    }\n\n    /**\n     * Sets the current comment text.\n     * @param {number} start Start offset\n     * @param {number} end End offset\n     * @param {boolean} isLeading set if a leading comment\n     * @returns {undefined}\n     * @inner\n     */\n    function setComment(start, end, isLeading) {\n        commentType = source.charAt(start++);\n        commentLine = line;\n        commentLineEmpty = false;\n        commentIsLeading = isLeading;\n        var lookback;\n        if (alternateCommentMode) {\n            lookback = 2;  // alternate comment parsing: \"//\" or \"/*\"\n        } else {\n            lookback = 3;  // \"///\" or \"/**\"\n        }\n        var commentOffset = start - lookback,\n            c;\n        do {\n            if (--commentOffset < 0 ||\n                    (c = source.charAt(commentOffset)) === \"\\n\") {\n                commentLineEmpty = true;\n                break;\n            }\n        } while (c === \" \" || c === \"\\t\");\n        var lines = source\n            .substring(start, end)\n            .split(setCommentSplitRe);\n        for (var i = 0; i < lines.length; ++i)\n            lines[i] = lines[i]\n                .replace(alternateCommentMode ? setCommentAltRe : setCommentRe, \"\")\n                .trim();\n        commentText = lines\n            .join(\"\\n\")\n            .trim();\n    }\n\n    function isDoubleSlashCommentLine(startOffset) {\n        var endOffset = findEndOfLine(startOffset);\n\n        // see if remaining line matches comment pattern\n        var lineText = source.substring(startOffset, endOffset);\n        // look for 1 or 2 slashes since startOffset would already point past\n        // the first slash that started the comment.\n        var isComment = /^\\s*\\/{1,2}/.test(lineText);\n        return isComment;\n    }\n\n    function findEndOfLine(cursor) {\n        // find end of cursor's line\n        var endOffset = cursor;\n        while (endOffset < length && charAt(endOffset) !== \"\\n\") {\n            endOffset++;\n        }\n        return endOffset;\n    }\n\n    /**\n     * Obtains the next token.\n     * @returns {string|null} Next token or `null` on eof\n     * @inner\n     */\n    function next() {\n        if (stack.length > 0)\n            return stack.shift();\n        if (stringDelim)\n            return readString();\n        var repeat,\n            prev,\n            curr,\n            start,\n            isDoc,\n            isLeadingComment = offset === 0;\n        do {\n            if (offset === length)\n                return null;\n            repeat = false;\n            while (whitespaceRe.test(curr = charAt(offset))) {\n                if (curr === \"\\n\") {\n                    isLeadingComment = true;\n                    ++line;\n                }\n                if (++offset === length)\n                    return null;\n            }\n\n            if (charAt(offset) === \"/\") {\n                if (++offset === length) {\n                    throw illegal(\"comment\");\n                }\n                if (charAt(offset) === \"/\") { // Line\n                    if (!alternateCommentMode) {\n                        // check for triple-slash comment\n                        isDoc = charAt(start = offset + 1) === \"/\";\n\n                        while (charAt(++offset) !== \"\\n\") {\n                            if (offset === length) {\n                                return null;\n                            }\n                        }\n                        ++offset;\n                        if (isDoc) {\n                            setComment(start, offset - 1, isLeadingComment);\n                        }\n                        ++line;\n                        repeat = true;\n                    } else {\n                        // check for double-slash comments, consolidating consecutive lines\n                        start = offset;\n                        isDoc = false;\n                        if (isDoubleSlashCommentLine(offset)) {\n                            isDoc = true;\n                            do {\n                                offset = findEndOfLine(offset);\n                                if (offset === length) {\n                                    break;\n                                }\n                                offset++;\n                            } while (isDoubleSlashCommentLine(offset));\n                        } else {\n                            offset = Math.min(length, findEndOfLine(offset) + 1);\n                        }\n                        if (isDoc) {\n                            setComment(start, offset, isLeadingComment);\n                        }\n                        line++;\n                        repeat = true;\n                    }\n                } else if ((curr = charAt(offset)) === \"*\") { /* Block */\n                    // check for /** (regular comment mode) or /* (alternate comment mode)\n                    start = offset + 1;\n                    isDoc = alternateCommentMode || charAt(start) === \"*\";\n                    do {\n                        if (curr === \"\\n\") {\n                            ++line;\n                        }\n                        if (++offset === length) {\n                            throw illegal(\"comment\");\n                        }\n                        prev = curr;\n                        curr = charAt(offset);\n                    } while (prev !== \"*\" || curr !== \"/\");\n                    ++offset;\n                    if (isDoc) {\n                        setComment(start, offset - 2, isLeadingComment);\n                    }\n                    repeat = true;\n                } else {\n                    return \"/\";\n                }\n            }\n        } while (repeat);\n\n        // offset !== length if we got here\n\n        var end = offset;\n        delimRe.lastIndex = 0;\n        var delim = delimRe.test(charAt(end++));\n        if (!delim)\n            while (end < length && !delimRe.test(charAt(end)))\n                ++end;\n        var token = source.substring(offset, offset = end);\n        if (token === \"\\\"\" || token === \"'\")\n            stringDelim = token;\n        return token;\n    }\n\n    /**\n     * Pushes a token back to the stack.\n     * @param {string} token Token\n     * @returns {undefined}\n     * @inner\n     */\n    function push(token) {\n        stack.push(token);\n    }\n\n    /**\n     * Peeks for the next token.\n     * @returns {string|null} Token or `null` on eof\n     * @inner\n     */\n    function peek() {\n        if (!stack.length) {\n            var token = next();\n            if (token === null)\n                return null;\n            push(token);\n        }\n        return stack[0];\n    }\n\n    /**\n     * Skips a token.\n     * @param {string} expected Expected token\n     * @param {boolean} [optional=false] Whether the token is optional\n     * @returns {boolean} `true` when skipped, `false` if not\n     * @throws {Error} When a required token is not present\n     * @inner\n     */\n    function skip(expected, optional) {\n        var actual = peek(),\n            equals = actual === expected;\n        if (equals) {\n            next();\n            return true;\n        }\n        if (!optional)\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\n        return false;\n    }\n\n    /**\n     * Gets a comment.\n     * @param {number} [trailingLine] Line number if looking for a trailing comment\n     * @returns {string|null} Comment text\n     * @inner\n     */\n    function cmnt(trailingLine) {\n        var ret = null;\n        if (trailingLine === undefined) {\n            if (commentLine === line - 1 && (alternateCommentMode || commentType === \"*\" || commentLineEmpty)) {\n                ret = commentIsLeading ? commentText : null;\n            }\n        } else {\n            /* istanbul ignore else */\n            if (commentLine < trailingLine) {\n                peek();\n            }\n            if (commentLine === trailingLine && !commentLineEmpty && (alternateCommentMode || commentType === \"/\")) {\n                ret = commentIsLeading ? null : commentText;\n            }\n        }\n        return ret;\n    }\n\n    return Object.defineProperty({\n        next: next,\n        peek: peek,\n        push: push,\n        skip: skip,\n        cmnt: cmnt\n    }, \"line\", {\n        get: function() { return line; }\n    });\n    /* eslint-enable callback-return */\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/protobufjs/src/tokenize.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}}],"sources":{"node_modules/protobufjs/src/tokenize.js":"\"use strict\";\nmodule.exports = tokenize;\n\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\n\nvar setCommentRe = /^ *[*/]+ */,\n    setCommentAltRe = /^\\s*\\*?\\/*/,\n    setCommentSplitRe = /\\n/g,\n    whitespaceRe = /\\s/,\n    unescapeRe = /\\\\(.?)/g;\n\nvar unescapeMap = {\n    \"0\": \"\\0\",\n    \"r\": \"\\r\",\n    \"n\": \"\\n\",\n    \"t\": \"\\t\"\n};\n\n/**\n * Unescapes a string.\n * @param {string} str String to unescape\n * @returns {string} Unescaped string\n * @property {Object.<string,string>} map Special characters map\n * @memberof tokenize\n */\nfunction unescape(str) {\n    return str.replace(unescapeRe, function($0, $1) {\n        switch ($1) {\n            case \"\\\\\":\n            case \"\":\n                return $1;\n            default:\n                return unescapeMap[$1] || \"\";\n        }\n    });\n}\n\ntokenize.unescape = unescape;\n\n/**\n * Gets the next token and advances.\n * @typedef TokenizerHandleNext\n * @type {function}\n * @returns {string|null} Next token or `null` on eof\n */\n\n/**\n * Peeks for the next token.\n * @typedef TokenizerHandlePeek\n * @type {function}\n * @returns {string|null} Next token or `null` on eof\n */\n\n/**\n * Pushes a token back to the stack.\n * @typedef TokenizerHandlePush\n * @type {function}\n * @param {string} token Token\n * @returns {undefined}\n */\n\n/**\n * Skips the next token.\n * @typedef TokenizerHandleSkip\n * @type {function}\n * @param {string} expected Expected token\n * @param {boolean} [optional=false] If optional\n * @returns {boolean} Whether the token matched\n * @throws {Error} If the token didn't match and is not optional\n */\n\n/**\n * Gets the comment on the previous line or, alternatively, the line comment on the specified line.\n * @typedef TokenizerHandleCmnt\n * @type {function}\n * @param {number} [line] Line number\n * @returns {string|null} Comment text or `null` if none\n */\n\n/**\n * Handle object returned from {@link tokenize}.\n * @interface ITokenizerHandle\n * @property {TokenizerHandleNext} next Gets the next token and advances (`null` on eof)\n * @property {TokenizerHandlePeek} peek Peeks for the next token (`null` on eof)\n * @property {TokenizerHandlePush} push Pushes a token back to the stack\n * @property {TokenizerHandleSkip} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\n * @property {TokenizerHandleCmnt} cmnt Gets the comment on the previous line or the line comment on the specified line, if any\n * @property {number} line Current line number\n */\n\n/**\n * Tokenizes the given .proto source and returns an object with useful utility functions.\n * @param {string} source Source contents\n * @param {boolean} alternateCommentMode Whether we should activate alternate comment parsing mode.\n * @returns {ITokenizerHandle} Tokenizer handle\n */\nfunction tokenize(source, alternateCommentMode) {\n    /* eslint-disable callback-return */\n    source = source.toString();\n\n    var offset = 0,\n        length = source.length,\n        line = 1,\n        commentType = null,\n        commentText = null,\n        commentLine = 0,\n        commentLineEmpty = false,\n        commentIsLeading = false;\n\n    var stack = [];\n\n    var stringDelim = null;\n\n    /* istanbul ignore next */\n    /**\n     * Creates an error for illegal syntax.\n     * @param {string} subject Subject\n     * @returns {Error} Error created\n     * @inner\n     */\n    function illegal(subject) {\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\n    }\n\n    /**\n     * Reads a string till its end.\n     * @returns {string} String read\n     * @inner\n     */\n    function readString() {\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\n        re.lastIndex = offset - 1;\n        var match = re.exec(source);\n        if (!match)\n            throw illegal(\"string\");\n        offset = re.lastIndex;\n        push(stringDelim);\n        stringDelim = null;\n        return unescape(match[1]);\n    }\n\n    /**\n     * Gets the character at `pos` within the source.\n     * @param {number} pos Position\n     * @returns {string} Character\n     * @inner\n     */\n    function charAt(pos) {\n        return source.charAt(pos);\n    }\n\n    /**\n     * Sets the current comment text.\n     * @param {number} start Start offset\n     * @param {number} end End offset\n     * @param {boolean} isLeading set if a leading comment\n     * @returns {undefined}\n     * @inner\n     */\n    function setComment(start, end, isLeading) {\n        commentType = source.charAt(start++);\n        commentLine = line;\n        commentLineEmpty = false;\n        commentIsLeading = isLeading;\n        var lookback;\n        if (alternateCommentMode) {\n            lookback = 2;  // alternate comment parsing: \"//\" or \"/*\"\n        } else {\n            lookback = 3;  // \"///\" or \"/**\"\n        }\n        var commentOffset = start - lookback,\n            c;\n        do {\n            if (--commentOffset < 0 ||\n                    (c = source.charAt(commentOffset)) === \"\\n\") {\n                commentLineEmpty = true;\n                break;\n            }\n        } while (c === \" \" || c === \"\\t\");\n        var lines = source\n            .substring(start, end)\n            .split(setCommentSplitRe);\n        for (var i = 0; i < lines.length; ++i)\n            lines[i] = lines[i]\n                .replace(alternateCommentMode ? setCommentAltRe : setCommentRe, \"\")\n                .trim();\n        commentText = lines\n            .join(\"\\n\")\n            .trim();\n    }\n\n    function isDoubleSlashCommentLine(startOffset) {\n        var endOffset = findEndOfLine(startOffset);\n\n        // see if remaining line matches comment pattern\n        var lineText = source.substring(startOffset, endOffset);\n        // look for 1 or 2 slashes since startOffset would already point past\n        // the first slash that started the comment.\n        var isComment = /^\\s*\\/{1,2}/.test(lineText);\n        return isComment;\n    }\n\n    function findEndOfLine(cursor) {\n        // find end of cursor's line\n        var endOffset = cursor;\n        while (endOffset < length && charAt(endOffset) !== \"\\n\") {\n            endOffset++;\n        }\n        return endOffset;\n    }\n\n    /**\n     * Obtains the next token.\n     * @returns {string|null} Next token or `null` on eof\n     * @inner\n     */\n    function next() {\n        if (stack.length > 0)\n            return stack.shift();\n        if (stringDelim)\n            return readString();\n        var repeat,\n            prev,\n            curr,\n            start,\n            isDoc,\n            isLeadingComment = offset === 0;\n        do {\n            if (offset === length)\n                return null;\n            repeat = false;\n            while (whitespaceRe.test(curr = charAt(offset))) {\n                if (curr === \"\\n\") {\n                    isLeadingComment = true;\n                    ++line;\n                }\n                if (++offset === length)\n                    return null;\n            }\n\n            if (charAt(offset) === \"/\") {\n                if (++offset === length) {\n                    throw illegal(\"comment\");\n                }\n                if (charAt(offset) === \"/\") { // Line\n                    if (!alternateCommentMode) {\n                        // check for triple-slash comment\n                        isDoc = charAt(start = offset + 1) === \"/\";\n\n                        while (charAt(++offset) !== \"\\n\") {\n                            if (offset === length) {\n                                return null;\n                            }\n                        }\n                        ++offset;\n                        if (isDoc) {\n                            setComment(start, offset - 1, isLeadingComment);\n                        }\n                        ++line;\n                        repeat = true;\n                    } else {\n                        // check for double-slash comments, consolidating consecutive lines\n                        start = offset;\n                        isDoc = false;\n                        if (isDoubleSlashCommentLine(offset)) {\n                            isDoc = true;\n                            do {\n                                offset = findEndOfLine(offset);\n                                if (offset === length) {\n                                    break;\n                                }\n                                offset++;\n                            } while (isDoubleSlashCommentLine(offset));\n                        } else {\n                            offset = Math.min(length, findEndOfLine(offset) + 1);\n                        }\n                        if (isDoc) {\n                            setComment(start, offset, isLeadingComment);\n                        }\n                        line++;\n                        repeat = true;\n                    }\n                } else if ((curr = charAt(offset)) === \"*\") { /* Block */\n                    // check for /** (regular comment mode) or /* (alternate comment mode)\n                    start = offset + 1;\n                    isDoc = alternateCommentMode || charAt(start) === \"*\";\n                    do {\n                        if (curr === \"\\n\") {\n                            ++line;\n                        }\n                        if (++offset === length) {\n                            throw illegal(\"comment\");\n                        }\n                        prev = curr;\n                        curr = charAt(offset);\n                    } while (prev !== \"*\" || curr !== \"/\");\n                    ++offset;\n                    if (isDoc) {\n                        setComment(start, offset - 2, isLeadingComment);\n                    }\n                    repeat = true;\n                } else {\n                    return \"/\";\n                }\n            }\n        } while (repeat);\n\n        // offset !== length if we got here\n\n        var end = offset;\n        delimRe.lastIndex = 0;\n        var delim = delimRe.test(charAt(end++));\n        if (!delim)\n            while (end < length && !delimRe.test(charAt(end)))\n                ++end;\n        var token = source.substring(offset, offset = end);\n        if (token === \"\\\"\" || token === \"'\")\n            stringDelim = token;\n        return token;\n    }\n\n    /**\n     * Pushes a token back to the stack.\n     * @param {string} token Token\n     * @returns {undefined}\n     * @inner\n     */\n    function push(token) {\n        stack.push(token);\n    }\n\n    /**\n     * Peeks for the next token.\n     * @returns {string|null} Token or `null` on eof\n     * @inner\n     */\n    function peek() {\n        if (!stack.length) {\n            var token = next();\n            if (token === null)\n                return null;\n            push(token);\n        }\n        return stack[0];\n    }\n\n    /**\n     * Skips a token.\n     * @param {string} expected Expected token\n     * @param {boolean} [optional=false] Whether the token is optional\n     * @returns {boolean} `true` when skipped, `false` if not\n     * @throws {Error} When a required token is not present\n     * @inner\n     */\n    function skip(expected, optional) {\n        var actual = peek(),\n            equals = actual === expected;\n        if (equals) {\n            next();\n            return true;\n        }\n        if (!optional)\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\n        return false;\n    }\n\n    /**\n     * Gets a comment.\n     * @param {number} [trailingLine] Line number if looking for a trailing comment\n     * @returns {string|null} Comment text\n     * @inner\n     */\n    function cmnt(trailingLine) {\n        var ret = null;\n        if (trailingLine === undefined) {\n            if (commentLine === line - 1 && (alternateCommentMode || commentType === \"*\" || commentLineEmpty)) {\n                ret = commentIsLeading ? commentText : null;\n            }\n        } else {\n            /* istanbul ignore else */\n            if (commentLine < trailingLine) {\n                peek();\n            }\n            if (commentLine === trailingLine && !commentLineEmpty && (alternateCommentMode || commentType === \"/\")) {\n                ret = commentIsLeading ? null : commentText;\n            }\n        }\n        return ret;\n    }\n\n    return Object.defineProperty({\n        next: next,\n        peek: peek,\n        push: push,\n        skip: skip,\n        cmnt: cmnt\n    }, \"line\", {\n        get: function() { return line; }\n    });\n    /* eslint-enable callback-return */\n}\n"},"lineCount":404}},"error":null,"hash":"12cb38bcb89eac0661f06e8032d5c196","cacheData":{"env":{}}}
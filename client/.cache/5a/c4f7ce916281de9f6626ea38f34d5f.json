{"id":"node_modules/protobufjs/src/field.js","dependencies":[{"name":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\package.json","includedInParent":true,"mtime":1648481643194},{"name":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\node_modules\\protobufjs\\package.json","includedInParent":true,"mtime":1648481642169},{"name":"./object","loc":{"line":5,"column":31,"index":98},"parent":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\node_modules\\protobufjs\\src\\field.js","resolved":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\node_modules\\protobufjs\\src\\object.js"},{"name":"./enum","loc":{"line":8,"column":20,"index":237},"parent":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\node_modules\\protobufjs\\src\\field.js","resolved":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\node_modules\\protobufjs\\src\\enum.js"},{"name":"./types","loc":{"line":9,"column":20,"index":268},"parent":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\node_modules\\protobufjs\\src\\field.js","resolved":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\node_modules\\protobufjs\\src\\types.js"},{"name":"./util","loc":{"line":10,"column":20,"index":300},"parent":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\node_modules\\protobufjs\\src\\field.js","resolved":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\node_modules\\protobufjs\\src\\util.js"}],"generated":{"js":"\"use strict\";\nmodule.exports = Field;\n\n// extends ReflectionObject\nvar ReflectionObject = require(\"./object\");\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\n\nvar Enum  = require(\"./enum\"),\n    types = require(\"./types\"),\n    util  = require(\"./util\");\n\nvar Type; // cyclic\n\nvar ruleRe = /^required|optional|repeated$/;\n\n/**\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\n * @name Field\n * @classdesc Reflected message field.\n * @extends FieldBase\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n */\n\n/**\n * Constructs a field from a field descriptor.\n * @param {string} name Field name\n * @param {IField} json Field descriptor\n * @returns {Field} Created field\n * @throws {TypeError} If arguments are invalid\n */\nField.fromJSON = function fromJSON(name, json) {\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\n};\n\n/**\n * Not an actual constructor. Use {@link Field} instead.\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\n * @exports FieldBase\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction Field(name, id, type, rule, extend, options, comment) {\n\n    if (util.isObject(rule)) {\n        comment = extend;\n        options = rule;\n        rule = extend = undefined;\n    } else if (util.isObject(extend)) {\n        comment = options;\n        options = extend;\n        extend = undefined;\n    }\n\n    ReflectionObject.call(this, name, options);\n\n    if (!util.isInteger(id) || id < 0)\n        throw TypeError(\"id must be a non-negative integer\");\n\n    if (!util.isString(type))\n        throw TypeError(\"type must be a string\");\n\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\n        throw TypeError(\"rule must be a string rule\");\n\n    if (extend !== undefined && !util.isString(extend))\n        throw TypeError(\"extend must be a string\");\n\n    if (rule === \"proto3_optional\") {\n        rule = \"optional\";\n    }\n    /**\n     * Field rule, if any.\n     * @type {string|undefined}\n     */\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\n\n    /**\n     * Field type.\n     * @type {string}\n     */\n    this.type = type; // toJSON\n\n    /**\n     * Unique field id.\n     * @type {number}\n     */\n    this.id = id; // toJSON, marker\n\n    /**\n     * Extended type if different from parent.\n     * @type {string|undefined}\n     */\n    this.extend = extend || undefined; // toJSON\n\n    /**\n     * Whether this field is required.\n     * @type {boolean}\n     */\n    this.required = rule === \"required\";\n\n    /**\n     * Whether this field is optional.\n     * @type {boolean}\n     */\n    this.optional = !this.required;\n\n    /**\n     * Whether this field is repeated.\n     * @type {boolean}\n     */\n    this.repeated = rule === \"repeated\";\n\n    /**\n     * Whether this field is a map or not.\n     * @type {boolean}\n     */\n    this.map = false;\n\n    /**\n     * Message this field belongs to.\n     * @type {Type|null}\n     */\n    this.message = null;\n\n    /**\n     * OneOf this field belongs to, if any,\n     * @type {OneOf|null}\n     */\n    this.partOf = null;\n\n    /**\n     * The field type's default value.\n     * @type {*}\n     */\n    this.typeDefault = null;\n\n    /**\n     * The field's default value on prototypes.\n     * @type {*}\n     */\n    this.defaultValue = null;\n\n    /**\n     * Whether this field's value should be treated as a long.\n     * @type {boolean}\n     */\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\n\n    /**\n     * Whether this field's value is a buffer.\n     * @type {boolean}\n     */\n    this.bytes = type === \"bytes\";\n\n    /**\n     * Resolved type if not a basic type.\n     * @type {Type|Enum|null}\n     */\n    this.resolvedType = null;\n\n    /**\n     * Sister-field within the extended type if a declaring extension field.\n     * @type {Field|null}\n     */\n    this.extensionField = null;\n\n    /**\n     * Sister-field within the declaring namespace if an extended field.\n     * @type {Field|null}\n     */\n    this.declaringField = null;\n\n    /**\n     * Internally remembers whether this field is packed.\n     * @type {boolean|null}\n     * @private\n     */\n    this._packed = null;\n\n    /**\n     * Comment for this field.\n     * @type {string|null}\n     */\n    this.comment = comment;\n}\n\n/**\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\n * @name Field#packed\n * @type {boolean}\n * @readonly\n */\nObject.defineProperty(Field.prototype, \"packed\", {\n    get: function() {\n        // defaults to packed=true if not explicity set to false\n        if (this._packed === null)\n            this._packed = this.getOption(\"packed\") !== false;\n        return this._packed;\n    }\n});\n\n/**\n * @override\n */\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\n    if (name === \"packed\") // clear cached before setting\n        this._packed = null;\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\n};\n\n/**\n * Field descriptor.\n * @interface IField\n * @property {string} [rule=\"optional\"] Field rule\n * @property {string} type Field type\n * @property {number} id Field id\n * @property {Object.<string,*>} [options] Field options\n */\n\n/**\n * Extension field descriptor.\n * @interface IExtensionField\n * @extends IField\n * @property {string} extend Extended type\n */\n\n/**\n * Converts this field to a field descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IField} Field descriptor\n */\nField.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"rule\"    , this.rule !== \"optional\" && this.rule || undefined,\n        \"type\"    , this.type,\n        \"id\"      , this.id,\n        \"extend\"  , this.extend,\n        \"options\" , this.options,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * Resolves this field's type references.\n * @returns {Field} `this`\n * @throws {Error} If any reference cannot be resolved\n */\nField.prototype.resolve = function resolve() {\n\n    if (this.resolved)\n        return this;\n\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\n        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\n        if (this.resolvedType instanceof Type)\n            this.typeDefault = null;\n        else // instanceof Enum\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\n    }\n\n    // use explicitly set default value if present\n    if (this.options && this.options[\"default\"] != null) {\n        this.typeDefault = this.options[\"default\"];\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\n    }\n\n    // remove unnecessary options\n    if (this.options) {\n        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\n            delete this.options.packed;\n        if (!Object.keys(this.options).length)\n            this.options = undefined;\n    }\n\n    // convert to internal data type if necesssary\n    if (this.long) {\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\n\n        /* istanbul ignore else */\n        if (Object.freeze)\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\n\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\n        var buf;\n        if (util.base64.test(this.typeDefault))\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\n        else\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\n        this.typeDefault = buf;\n    }\n\n    // take special care of maps and repeated fields\n    if (this.map)\n        this.defaultValue = util.emptyObject;\n    else if (this.repeated)\n        this.defaultValue = util.emptyArray;\n    else\n        this.defaultValue = this.typeDefault;\n\n    // ensure proper value on prototype\n    if (this.parent instanceof Type)\n        this.parent.ctor.prototype[this.name] = this.defaultValue;\n\n    return ReflectionObject.prototype.resolve.call(this);\n};\n\n/**\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\n * @typedef FieldDecorator\n * @type {function}\n * @param {Object} prototype Target prototype\n * @param {string} fieldName Field name\n * @returns {undefined}\n */\n\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @param {T} [defaultValue] Default value\n * @returns {FieldDecorator} Decorator function\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\n */\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\n\n    // submessage: decorate the submessage and use its name as the type\n    if (typeof fieldType === \"function\")\n        fieldType = util.decorateType(fieldType).name;\n\n    // enum reference: create a reflected copy of the enum and keep reuseing it\n    else if (fieldType && typeof fieldType === \"object\")\n        fieldType = util.decorateEnum(fieldType).name;\n\n    return function fieldDecorator(prototype, fieldName) {\n        util.decorateType(prototype.constructor)\n            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { \"default\": defaultValue }));\n    };\n};\n\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {Constructor<T>|string} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @returns {FieldDecorator} Decorator function\n * @template T extends Message<T>\n * @variation 2\n */\n// like Field.d but without a default value\n\n// Sets up cyclic dependencies (called in index-light)\nField._configure = function configure(Type_) {\n    Type = Type_;\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/protobufjs/src/field.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/protobufjs/src/field.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}}],"sources":{"node_modules/protobufjs/src/field.js":"\"use strict\";\nmodule.exports = Field;\n\n// extends ReflectionObject\nvar ReflectionObject = require(\"./object\");\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\n\nvar Enum  = require(\"./enum\"),\n    types = require(\"./types\"),\n    util  = require(\"./util\");\n\nvar Type; // cyclic\n\nvar ruleRe = /^required|optional|repeated$/;\n\n/**\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\n * @name Field\n * @classdesc Reflected message field.\n * @extends FieldBase\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n */\n\n/**\n * Constructs a field from a field descriptor.\n * @param {string} name Field name\n * @param {IField} json Field descriptor\n * @returns {Field} Created field\n * @throws {TypeError} If arguments are invalid\n */\nField.fromJSON = function fromJSON(name, json) {\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\n};\n\n/**\n * Not an actual constructor. Use {@link Field} instead.\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\n * @exports FieldBase\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction Field(name, id, type, rule, extend, options, comment) {\n\n    if (util.isObject(rule)) {\n        comment = extend;\n        options = rule;\n        rule = extend = undefined;\n    } else if (util.isObject(extend)) {\n        comment = options;\n        options = extend;\n        extend = undefined;\n    }\n\n    ReflectionObject.call(this, name, options);\n\n    if (!util.isInteger(id) || id < 0)\n        throw TypeError(\"id must be a non-negative integer\");\n\n    if (!util.isString(type))\n        throw TypeError(\"type must be a string\");\n\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\n        throw TypeError(\"rule must be a string rule\");\n\n    if (extend !== undefined && !util.isString(extend))\n        throw TypeError(\"extend must be a string\");\n\n    if (rule === \"proto3_optional\") {\n        rule = \"optional\";\n    }\n    /**\n     * Field rule, if any.\n     * @type {string|undefined}\n     */\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\n\n    /**\n     * Field type.\n     * @type {string}\n     */\n    this.type = type; // toJSON\n\n    /**\n     * Unique field id.\n     * @type {number}\n     */\n    this.id = id; // toJSON, marker\n\n    /**\n     * Extended type if different from parent.\n     * @type {string|undefined}\n     */\n    this.extend = extend || undefined; // toJSON\n\n    /**\n     * Whether this field is required.\n     * @type {boolean}\n     */\n    this.required = rule === \"required\";\n\n    /**\n     * Whether this field is optional.\n     * @type {boolean}\n     */\n    this.optional = !this.required;\n\n    /**\n     * Whether this field is repeated.\n     * @type {boolean}\n     */\n    this.repeated = rule === \"repeated\";\n\n    /**\n     * Whether this field is a map or not.\n     * @type {boolean}\n     */\n    this.map = false;\n\n    /**\n     * Message this field belongs to.\n     * @type {Type|null}\n     */\n    this.message = null;\n\n    /**\n     * OneOf this field belongs to, if any,\n     * @type {OneOf|null}\n     */\n    this.partOf = null;\n\n    /**\n     * The field type's default value.\n     * @type {*}\n     */\n    this.typeDefault = null;\n\n    /**\n     * The field's default value on prototypes.\n     * @type {*}\n     */\n    this.defaultValue = null;\n\n    /**\n     * Whether this field's value should be treated as a long.\n     * @type {boolean}\n     */\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\n\n    /**\n     * Whether this field's value is a buffer.\n     * @type {boolean}\n     */\n    this.bytes = type === \"bytes\";\n\n    /**\n     * Resolved type if not a basic type.\n     * @type {Type|Enum|null}\n     */\n    this.resolvedType = null;\n\n    /**\n     * Sister-field within the extended type if a declaring extension field.\n     * @type {Field|null}\n     */\n    this.extensionField = null;\n\n    /**\n     * Sister-field within the declaring namespace if an extended field.\n     * @type {Field|null}\n     */\n    this.declaringField = null;\n\n    /**\n     * Internally remembers whether this field is packed.\n     * @type {boolean|null}\n     * @private\n     */\n    this._packed = null;\n\n    /**\n     * Comment for this field.\n     * @type {string|null}\n     */\n    this.comment = comment;\n}\n\n/**\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\n * @name Field#packed\n * @type {boolean}\n * @readonly\n */\nObject.defineProperty(Field.prototype, \"packed\", {\n    get: function() {\n        // defaults to packed=true if not explicity set to false\n        if (this._packed === null)\n            this._packed = this.getOption(\"packed\") !== false;\n        return this._packed;\n    }\n});\n\n/**\n * @override\n */\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\n    if (name === \"packed\") // clear cached before setting\n        this._packed = null;\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\n};\n\n/**\n * Field descriptor.\n * @interface IField\n * @property {string} [rule=\"optional\"] Field rule\n * @property {string} type Field type\n * @property {number} id Field id\n * @property {Object.<string,*>} [options] Field options\n */\n\n/**\n * Extension field descriptor.\n * @interface IExtensionField\n * @extends IField\n * @property {string} extend Extended type\n */\n\n/**\n * Converts this field to a field descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IField} Field descriptor\n */\nField.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"rule\"    , this.rule !== \"optional\" && this.rule || undefined,\n        \"type\"    , this.type,\n        \"id\"      , this.id,\n        \"extend\"  , this.extend,\n        \"options\" , this.options,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * Resolves this field's type references.\n * @returns {Field} `this`\n * @throws {Error} If any reference cannot be resolved\n */\nField.prototype.resolve = function resolve() {\n\n    if (this.resolved)\n        return this;\n\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\n        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\n        if (this.resolvedType instanceof Type)\n            this.typeDefault = null;\n        else // instanceof Enum\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\n    }\n\n    // use explicitly set default value if present\n    if (this.options && this.options[\"default\"] != null) {\n        this.typeDefault = this.options[\"default\"];\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\n    }\n\n    // remove unnecessary options\n    if (this.options) {\n        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\n            delete this.options.packed;\n        if (!Object.keys(this.options).length)\n            this.options = undefined;\n    }\n\n    // convert to internal data type if necesssary\n    if (this.long) {\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\n\n        /* istanbul ignore else */\n        if (Object.freeze)\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\n\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\n        var buf;\n        if (util.base64.test(this.typeDefault))\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\n        else\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\n        this.typeDefault = buf;\n    }\n\n    // take special care of maps and repeated fields\n    if (this.map)\n        this.defaultValue = util.emptyObject;\n    else if (this.repeated)\n        this.defaultValue = util.emptyArray;\n    else\n        this.defaultValue = this.typeDefault;\n\n    // ensure proper value on prototype\n    if (this.parent instanceof Type)\n        this.parent.ctor.prototype[this.name] = this.defaultValue;\n\n    return ReflectionObject.prototype.resolve.call(this);\n};\n\n/**\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\n * @typedef FieldDecorator\n * @type {function}\n * @param {Object} prototype Target prototype\n * @param {string} fieldName Field name\n * @returns {undefined}\n */\n\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @param {T} [defaultValue] Default value\n * @returns {FieldDecorator} Decorator function\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\n */\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\n\n    // submessage: decorate the submessage and use its name as the type\n    if (typeof fieldType === \"function\")\n        fieldType = util.decorateType(fieldType).name;\n\n    // enum reference: create a reflected copy of the enum and keep reuseing it\n    else if (fieldType && typeof fieldType === \"object\")\n        fieldType = util.decorateEnum(fieldType).name;\n\n    return function fieldDecorator(prototype, fieldName) {\n        util.decorateType(prototype.constructor)\n            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { \"default\": defaultValue }));\n    };\n};\n\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {Constructor<T>|string} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @returns {FieldDecorator} Decorator function\n * @template T extends Message<T>\n * @variation 2\n */\n// like Field.d but without a default value\n\n// Sets up cyclic dependencies (called in index-light)\nField._configure = function configure(Type_) {\n    Type = Type_;\n};\n"},"lineCount":375}},"error":null,"hash":"826b2362ed6a2e3f241538719d4af607","cacheData":{"env":{}}}
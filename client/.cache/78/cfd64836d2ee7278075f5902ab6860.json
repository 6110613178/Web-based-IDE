{"id":"node_modules/protobufjs/src/method.js","dependencies":[{"name":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\package.json","includedInParent":true,"mtime":1648481643194},{"name":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\node_modules\\protobufjs\\package.json","includedInParent":true,"mtime":1648481642169},{"name":"./object","loc":{"line":5,"column":31,"index":99},"parent":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\node_modules\\protobufjs\\src\\method.js","resolved":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\node_modules\\protobufjs\\src\\object.js"},{"name":"./util","loc":{"line":8,"column":19,"index":240},"parent":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\node_modules\\protobufjs\\src\\method.js","resolved":"C:\\Users\\Teerat Prasitwet\\Desktop\\Web-based IDE Project\\client\\node_modules\\protobufjs\\src\\util.js"}],"generated":{"js":"\"use strict\";\nmodule.exports = Method;\n\n// extends ReflectionObject\nvar ReflectionObject = require(\"./object\");\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\n\nvar util = require(\"./util\");\n\n/**\n * Constructs a new service method instance.\n * @classdesc Reflected service method.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Method name\n * @param {string|undefined} type Method type, usually `\"rpc\"`\n * @param {string} requestType Request message type\n * @param {string} responseType Response message type\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] The comment for this method\n * @param {Object.<string,*>} [parsedOptions] Declared options, properly parsed into an object\n */\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options, comment, parsedOptions) {\n\n    /* istanbul ignore next */\n    if (util.isObject(requestStream)) {\n        options = requestStream;\n        requestStream = responseStream = undefined;\n    } else if (util.isObject(responseStream)) {\n        options = responseStream;\n        responseStream = undefined;\n    }\n\n    /* istanbul ignore if */\n    if (!(type === undefined || util.isString(type)))\n        throw TypeError(\"type must be a string\");\n\n    /* istanbul ignore if */\n    if (!util.isString(requestType))\n        throw TypeError(\"requestType must be a string\");\n\n    /* istanbul ignore if */\n    if (!util.isString(responseType))\n        throw TypeError(\"responseType must be a string\");\n\n    ReflectionObject.call(this, name, options);\n\n    /**\n     * Method type.\n     * @type {string}\n     */\n    this.type = type || \"rpc\"; // toJSON\n\n    /**\n     * Request type.\n     * @type {string}\n     */\n    this.requestType = requestType; // toJSON, marker\n\n    /**\n     * Whether requests are streamed or not.\n     * @type {boolean|undefined}\n     */\n    this.requestStream = requestStream ? true : undefined; // toJSON\n\n    /**\n     * Response type.\n     * @type {string}\n     */\n    this.responseType = responseType; // toJSON\n\n    /**\n     * Whether responses are streamed or not.\n     * @type {boolean|undefined}\n     */\n    this.responseStream = responseStream ? true : undefined; // toJSON\n\n    /**\n     * Resolved request type.\n     * @type {Type|null}\n     */\n    this.resolvedRequestType = null;\n\n    /**\n     * Resolved response type.\n     * @type {Type|null}\n     */\n    this.resolvedResponseType = null;\n\n    /**\n     * Comment for this method\n     * @type {string|null}\n     */\n    this.comment = comment;\n\n    /**\n     * Options properly parsed into an object\n     */\n    this.parsedOptions = parsedOptions;\n}\n\n/**\n * Method descriptor.\n * @interface IMethod\n * @property {string} [type=\"rpc\"] Method type\n * @property {string} requestType Request type\n * @property {string} responseType Response type\n * @property {boolean} [requestStream=false] Whether requests are streamed\n * @property {boolean} [responseStream=false] Whether responses are streamed\n * @property {Object.<string,*>} [options] Method options\n * @property {string} comment Method comments\n * @property {Object.<string,*>} [parsedOptions] Method options properly parsed into an object\n */\n\n/**\n * Constructs a method from a method descriptor.\n * @param {string} name Method name\n * @param {IMethod} json Method descriptor\n * @returns {Method} Created method\n * @throws {TypeError} If arguments are invalid\n */\nMethod.fromJSON = function fromJSON(name, json) {\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment, json.parsedOptions);\n};\n\n/**\n * Converts this method to a method descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IMethod} Method descriptor\n */\nMethod.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"type\"           , this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\n        \"requestType\"    , this.requestType,\n        \"requestStream\"  , this.requestStream,\n        \"responseType\"   , this.responseType,\n        \"responseStream\" , this.responseStream,\n        \"options\"        , this.options,\n        \"comment\"        , keepComments ? this.comment : undefined,\n        \"parsedOptions\"  , this.parsedOptions,\n    ]);\n};\n\n/**\n * @override\n */\nMethod.prototype.resolve = function resolve() {\n\n    /* istanbul ignore if */\n    if (this.resolved)\n        return this;\n\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\n\n    return ReflectionObject.prototype.resolve.call(this);\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/protobufjs/src/method.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/protobufjs/src/method.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}}],"sources":{"node_modules/protobufjs/src/method.js":"\"use strict\";\nmodule.exports = Method;\n\n// extends ReflectionObject\nvar ReflectionObject = require(\"./object\");\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\n\nvar util = require(\"./util\");\n\n/**\n * Constructs a new service method instance.\n * @classdesc Reflected service method.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Method name\n * @param {string|undefined} type Method type, usually `\"rpc\"`\n * @param {string} requestType Request message type\n * @param {string} responseType Response message type\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] The comment for this method\n * @param {Object.<string,*>} [parsedOptions] Declared options, properly parsed into an object\n */\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options, comment, parsedOptions) {\n\n    /* istanbul ignore next */\n    if (util.isObject(requestStream)) {\n        options = requestStream;\n        requestStream = responseStream = undefined;\n    } else if (util.isObject(responseStream)) {\n        options = responseStream;\n        responseStream = undefined;\n    }\n\n    /* istanbul ignore if */\n    if (!(type === undefined || util.isString(type)))\n        throw TypeError(\"type must be a string\");\n\n    /* istanbul ignore if */\n    if (!util.isString(requestType))\n        throw TypeError(\"requestType must be a string\");\n\n    /* istanbul ignore if */\n    if (!util.isString(responseType))\n        throw TypeError(\"responseType must be a string\");\n\n    ReflectionObject.call(this, name, options);\n\n    /**\n     * Method type.\n     * @type {string}\n     */\n    this.type = type || \"rpc\"; // toJSON\n\n    /**\n     * Request type.\n     * @type {string}\n     */\n    this.requestType = requestType; // toJSON, marker\n\n    /**\n     * Whether requests are streamed or not.\n     * @type {boolean|undefined}\n     */\n    this.requestStream = requestStream ? true : undefined; // toJSON\n\n    /**\n     * Response type.\n     * @type {string}\n     */\n    this.responseType = responseType; // toJSON\n\n    /**\n     * Whether responses are streamed or not.\n     * @type {boolean|undefined}\n     */\n    this.responseStream = responseStream ? true : undefined; // toJSON\n\n    /**\n     * Resolved request type.\n     * @type {Type|null}\n     */\n    this.resolvedRequestType = null;\n\n    /**\n     * Resolved response type.\n     * @type {Type|null}\n     */\n    this.resolvedResponseType = null;\n\n    /**\n     * Comment for this method\n     * @type {string|null}\n     */\n    this.comment = comment;\n\n    /**\n     * Options properly parsed into an object\n     */\n    this.parsedOptions = parsedOptions;\n}\n\n/**\n * Method descriptor.\n * @interface IMethod\n * @property {string} [type=\"rpc\"] Method type\n * @property {string} requestType Request type\n * @property {string} responseType Response type\n * @property {boolean} [requestStream=false] Whether requests are streamed\n * @property {boolean} [responseStream=false] Whether responses are streamed\n * @property {Object.<string,*>} [options] Method options\n * @property {string} comment Method comments\n * @property {Object.<string,*>} [parsedOptions] Method options properly parsed into an object\n */\n\n/**\n * Constructs a method from a method descriptor.\n * @param {string} name Method name\n * @param {IMethod} json Method descriptor\n * @returns {Method} Created method\n * @throws {TypeError} If arguments are invalid\n */\nMethod.fromJSON = function fromJSON(name, json) {\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment, json.parsedOptions);\n};\n\n/**\n * Converts this method to a method descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IMethod} Method descriptor\n */\nMethod.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"type\"           , this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\n        \"requestType\"    , this.requestType,\n        \"requestStream\"  , this.requestStream,\n        \"responseType\"   , this.responseType,\n        \"responseStream\" , this.responseStream,\n        \"options\"        , this.options,\n        \"comment\"        , keepComments ? this.comment : undefined,\n        \"parsedOptions\"  , this.parsedOptions,\n    ]);\n};\n\n/**\n * @override\n */\nMethod.prototype.resolve = function resolve() {\n\n    /* istanbul ignore if */\n    if (this.resolved)\n        return this;\n\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\n\n    return ReflectionObject.prototype.resolve.call(this);\n};\n"},"lineCount":161}},"error":null,"hash":"f434b3593f3c51c0411cb0e13644a816","cacheData":{"env":{}}}